// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
//
// This Source Code Form is "Incompatible With Secondary Licenses", as
// defined by the Mozilla Public License, v. 2.0.
//
// Copyright Â© 2022 mumblingdrunkard

#[allow(unused)]
#[derive(Copy, Clone, Debug)]
#[repr(u16)]
pub enum Csr {
    FFlags = 0,
    Frm,
    FCsr,

    Cycle,
    Time,
    InstRet,
    HpmCounter3,
    HpmCounter4,
    HpmCounter5,
    HpmCounter6,
    HpmCounter7,
    HpmCounter8,
    HpmCounter9,
    HpmCounter10,
    HpmCounter11,
    HpmCounter12,
    HpmCounter13,
    HpmCounter14,
    HpmCounter15,
    HpmCounter16,
    HpmCounter17,
    HpmCounter18,
    HpmCounter19,
    HpmCounter20,
    HpmCounter21,
    HpmCounter22,
    HpmCounter23,
    HpmCounter24,
    HpmCounter25,
    HpmCounter26,
    HpmCounter27,
    HpmCounter28,
    HpmCounter29,
    HpmCounter30,
    HpmCounter31,

    Cycleh,
    Timeh,
    InstReth,
    HpmCounter3h,
    HpmCounter4h,
    HpmCounter5h,
    HpmCounter6h,
    HpmCounter7h,
    HpmCounter8h,
    HpmCounter9h,
    HpmCounter10h,
    HpmCounter11h,
    HpmCounter12h,
    HpmCounter13h,
    HpmCounter14h,
    HpmCounter15h,
    HpmCounter16h,
    HpmCounter17h,
    HpmCounter18h,
    HpmCounter19h,
    HpmCounter20h,
    HpmCounter21h,
    HpmCounter22h,
    HpmCounter23h,
    HpmCounter24h,
    HpmCounter25h,
    HpmCounter26h,
    HpmCounter27h,
    HpmCounter28h,
    HpmCounter29h,
    HpmCounter30h,
    HpmCounter31h,

    SStatus,
    SSie,
    STVec,
    SCounterEn,

    SEnvCfg,

    SScratch,
    Sepc,
    SCause,
    STVal,
    Sip,

    Satp,
    SContext,

    MVendorId,
    MArchId,
    MImpId,
    MHartId,
    MConfigPtr,

    MStatus,
    Misa,
    MEDeleg,
    MIDeleg,
    Mie,
    MTVec,
    MCounterEn,
    MStatusH,

    MScratch,
    Mepc,
    MCause,
    MTVal,
    Mip,
    MTInst,
    MTVal2,

    MEnvCfg,
    MEnvCfgh,
    MSecCfg,
    MSecCfgh,

    PmpCfg0,
    PmpCfg1,
    PmpCfg2,
    PmpCfg3,
    PmpCfg4,
    PmpCfg5,
    PmpCfg6,
    PmpCfg7,
    PmpCfg08,
    PmpCfg09,
    PmpCfg10,
    PmpCfg11,
    PmpCfg12,
    PmpCfg13,
    PmpCfg14,
    PmpCfg15,

    PmpAddr0,
    PmpAddr1,
    PmpAddr2,
    PmpAddr3,
    PmpAddr4,
    PmpAddr5,
    PmpAddr6,
    PmpAddr7,
    PmpAddr8,
    PmpAddr9,
    PmpAddr10,
    PmpAddr11,
    PmpAddr12,
    PmpAddr13,
    PmpAddr14,
    PmpAddr15,
    PmpAddr16,
    PmpAddr17,
    PmpAddr18,
    PmpAddr19,
    PmpAddr20,
    PmpAddr21,
    PmpAddr22,
    PmpAddr23,
    PmpAddr24,
    PmpAddr25,
    PmpAddr26,
    PmpAddr27,
    PmpAddr28,
    PmpAddr29,
    PmpAddr30,
    PmpAddr31,
    PmpAddr32,
    PmpAddr33,
    PmpAddr34,
    PmpAddr35,
    PmpAddr36,
    PmpAddr37,
    PmpAddr38,
    PmpAddr39,
    PmpAddr40,
    PmpAddr41,
    PmpAddr42,
    PmpAddr43,
    PmpAddr44,
    PmpAddr45,
    PmpAddr46,
    PmpAddr47,
    PmpAddr48,
    PmpAddr49,
    PmpAddr50,
    PmpAddr51,
    PmpAddr52,
    PmpAddr53,
    PmpAddr54,
    PmpAddr55,
    PmpAddr56,
    PmpAddr57,
    PmpAddr58,
    PmpAddr59,
    PmpAddr60,
    PmpAddr61,
    PmpAddr62,
    PmpAddr63,

    MCycle,
    MInstRet,
    MHpmCounter3,
    MHpmCounter4,
    MHpmCounter5,
    MHpmCounter6,
    MHpmCounter7,
    MHpmCounter8,
    MHpmCounter9,
    MHpmCounter10,
    MHpmCounter11,
    MHpmCounter12,
    MHpmCounter13,
    MHpmCounter14,
    MHpmCounter15,
    MHpmCounter16,
    MHpmCounter17,
    MHpmCounter18,
    MHpmCounter19,
    MHpmCounter20,
    MHpmCounter21,
    MHpmCounter22,
    MHpmCounter23,
    MHpmCounter24,
    MHpmCounter25,
    MHpmCounter26,
    MHpmCounter27,
    MHpmCounter28,
    MHpmCounter29,
    MHpmCounter30,
    MHpmCounter31,

    MCycleh,
    MInstReth,
    MHpmCounter3h,
    MHpmCounter4h,
    MHpmCounter5h,
    MHpmCounter6h,
    MHpmCounter7h,
    MHpmCounter8h,
    MHpmCounter9h,
    MHpmCounter10h,
    MHpmCounter11h,
    MHpmCounter12h,
    MHpmCounter13h,
    MHpmCounter14h,
    MHpmCounter15h,
    MHpmCounter16h,
    MHpmCounter17h,
    MHpmCounter18h,
    MHpmCounter19h,
    MHpmCounter20h,
    MHpmCounter21h,
    MHpmCounter22h,
    MHpmCounter23h,
    MHpmCounter24h,
    MHpmCounter25h,
    MHpmCounter26h,
    MHpmCounter27h,
    MHpmCounter28h,
    MHpmCounter29h,
    MHpmCounter30h,
    MHpmCounter31h,

    MCountInhibit,
    MHpmEvent3,
    MHpmEvent4,
    MHpmEvent5,
    MHpmEvent6,
    MHpmEvent7,
    MHpmEvent8,
    MHpmEvent9,
    MHpmEvent10,
    MHpmEvent11,
    MHpmEvent12,
    MHpmEvent13,
    MHpmEvent14,
    MHpmEvent15,
    MHpmEvent16,
    MHpmEvent17,
    MHpmEvent18,
    MHpmEvent19,
    MHpmEvent20,
    MHpmEvent21,
    MHpmEvent22,
    MHpmEvent23,
    MHpmEvent24,
    MHpmEvent25,
    MHpmEvent26,
    MHpmEvent27,
    MHpmEvent28,
    MHpmEvent29,
    MHpmEvent30,
    MHpmEvent31,

    Invalid,
}

const CSR_SIZE: usize = Csr::Invalid as usize + 1;

impl From<u32> for Csr {
    fn from(r: u32) -> Self {
        use Csr::*;
        match r {
            0x001 => FFlags,
            0x002 => Frm,
            0x003 => FCsr,

            0xC00 => Cycle,
            0xC01 => Time,
            0xC02 => InstRet,
            0xC03 => HpmCounter3,
            0xC04 => HpmCounter4,
            0xC05 => HpmCounter5,
            0xC06 => HpmCounter6,
            0xC07 => HpmCounter7,
            0xC08 => HpmCounter8,
            0xC09 => HpmCounter9,
            0xC0A => HpmCounter10,
            0xC0B => HpmCounter11,
            0xC0C => HpmCounter12,
            0xC0D => HpmCounter13,
            0xC0E => HpmCounter14,
            0xC0F => HpmCounter15,
            0xC10 => HpmCounter16,
            0xC11 => HpmCounter17,
            0xC12 => HpmCounter18,
            0xC13 => HpmCounter19,
            0xC14 => HpmCounter20,
            0xC15 => HpmCounter21,
            0xC16 => HpmCounter22,
            0xC17 => HpmCounter23,
            0xC18 => HpmCounter24,
            0xC19 => HpmCounter25,
            0xC1A => HpmCounter26,
            0xC1B => HpmCounter27,
            0xC1C => HpmCounter28,
            0xC1D => HpmCounter29,
            0xC1E => HpmCounter30,
            0xC1F => HpmCounter31,

            0xC80 => Cycleh,
            0xC81 => Timeh,
            0xC82 => InstReth,
            0xC83 => HpmCounter3h,
            0xC84 => HpmCounter4h,
            0xC85 => HpmCounter5h,
            0xC86 => HpmCounter6h,
            0xC87 => HpmCounter7h,
            0xC88 => HpmCounter8h,
            0xC89 => HpmCounter9h,
            0xC8A => HpmCounter10h,
            0xC8B => HpmCounter11h,
            0xC8C => HpmCounter12h,
            0xC8D => HpmCounter13h,
            0xC8E => HpmCounter14h,
            0xC8F => HpmCounter15h,
            0xC90 => HpmCounter16h,
            0xC91 => HpmCounter17h,
            0xC92 => HpmCounter18h,
            0xC93 => HpmCounter19h,
            0xC94 => HpmCounter20h,
            0xC95 => HpmCounter21h,
            0xC96 => HpmCounter22h,
            0xC97 => HpmCounter23h,
            0xC98 => HpmCounter24h,
            0xC99 => HpmCounter25h,
            0xC9A => HpmCounter26h,
            0xC9B => HpmCounter27h,
            0xC9C => HpmCounter28h,
            0xC9D => HpmCounter29h,
            0xC9E => HpmCounter30h,
            0xC9F => HpmCounter31h,

            0x100 => SStatus,
            0x104 => SSie,
            0x105 => STVec,
            0x106 => SCounterEn,

            0x10A => SEnvCfg,

            0x140 => SScratch,
            0x141 => Sepc,
            0x142 => SCause,
            0x143 => STVal,
            0x144 => Sip,

            0x180 => Satp,
            0x5A8 => SContext,

            0xF11 => MVendorId,
            0xF12 => MArchId,
            0xF13 => MImpId,
            0xF14 => MHartId,
            0xF15 => MConfigPtr,

            0x300 => MStatus,
            0x301 => Misa,
            0x302 => MEDeleg,
            0x303 => MIDeleg,
            0x304 => Mie,
            0x305 => MTVec,
            0x306 => MCounterEn,
            0x310 => MStatusH,

            0x340 => MScratch,
            0x341 => Mepc,
            0x342 => MCause,
            0x343 => MTVal,
            0x344 => Mip,
            0x34A => MTInst,
            0x34B => MTVal2,

            0x30A => MEnvCfg,
            0x31A => MEnvCfgh,
            0x747 => MSecCfg,
            0x757 => MSecCfgh,

            0x3A0 => PmpCfg0,
            0x3A1 => PmpCfg1,
            0x3A2 => PmpCfg2,
            0x3A3 => PmpCfg3,
            0x3A4 => PmpCfg4,
            0x3A5 => PmpCfg5,
            0x3A6 => PmpCfg6,
            0x3A7 => PmpCfg7,
            0x3A8 => PmpCfg08,
            0x3A9 => PmpCfg09,
            0x3AA => PmpCfg10,
            0x3AB => PmpCfg11,
            0x3AC => PmpCfg12,
            0x3AD => PmpCfg13,
            0x3AE => PmpCfg14,
            0x3AF => PmpCfg15,

            0x3B0 => PmpAddr0,
            0x3B1 => PmpAddr1,
            0x3B2 => PmpAddr2,
            0x3B3 => PmpAddr3,
            0x3B4 => PmpAddr4,
            0x3B5 => PmpAddr5,
            0x3B6 => PmpAddr6,
            0x3B7 => PmpAddr7,
            0x3B8 => PmpAddr8,
            0x3B9 => PmpAddr9,
            0x3BA => PmpAddr10,
            0x3BB => PmpAddr11,
            0x3BC => PmpAddr12,
            0x3BD => PmpAddr13,
            0x3BE => PmpAddr14,
            0x3BF => PmpAddr15,
            0x3C0 => PmpAddr16,
            0x3C1 => PmpAddr17,
            0x3C2 => PmpAddr18,
            0x3C3 => PmpAddr19,
            0x3C4 => PmpAddr20,
            0x3C5 => PmpAddr21,
            0x3C6 => PmpAddr22,
            0x3C7 => PmpAddr23,
            0x3C8 => PmpAddr24,
            0x3C9 => PmpAddr25,
            0x3CA => PmpAddr26,
            0x3CB => PmpAddr27,
            0x3CC => PmpAddr28,
            0x3CD => PmpAddr29,
            0x3CE => PmpAddr30,
            0x3CF => PmpAddr31,
            0x3D0 => PmpAddr32,
            0x3D1 => PmpAddr33,
            0x3D2 => PmpAddr34,
            0x3D3 => PmpAddr35,
            0x3D4 => PmpAddr36,
            0x3D5 => PmpAddr37,
            0x3D6 => PmpAddr38,
            0x3D7 => PmpAddr39,
            0x3D8 => PmpAddr40,
            0x3D9 => PmpAddr41,
            0x3DA => PmpAddr42,
            0x3DB => PmpAddr43,
            0x3DC => PmpAddr44,
            0x3DD => PmpAddr45,
            0x3DE => PmpAddr46,
            0x3DF => PmpAddr47,
            0x3E0 => PmpAddr48,
            0x3E1 => PmpAddr49,
            0x3E2 => PmpAddr50,
            0x3E3 => PmpAddr51,
            0x3E4 => PmpAddr52,
            0x3E5 => PmpAddr53,
            0x3E6 => PmpAddr54,
            0x3E7 => PmpAddr55,
            0x3E8 => PmpAddr56,
            0x3E9 => PmpAddr57,
            0x3EA => PmpAddr58,
            0x3EB => PmpAddr59,
            0x3EC => PmpAddr60,
            0x3ED => PmpAddr61,
            0x3EE => PmpAddr62,
            0x3EF => PmpAddr63,

            0xB00 => MCycle,
            0xB02 => MInstRet,
            0xB03 => MHpmCounter3,
            0xB04 => MHpmCounter4,
            0xB05 => MHpmCounter5,
            0xB06 => MHpmCounter6,
            0xB07 => MHpmCounter7,
            0xB08 => MHpmCounter8,
            0xB09 => MHpmCounter9,
            0xB0A => MHpmCounter10,
            0xB0B => MHpmCounter11,
            0xB0C => MHpmCounter12,
            0xB0D => MHpmCounter13,
            0xB0E => MHpmCounter14,
            0xB0F => MHpmCounter15,
            0xB10 => MHpmCounter16,
            0xB11 => MHpmCounter17,
            0xB12 => MHpmCounter18,
            0xB13 => MHpmCounter19,
            0xB14 => MHpmCounter20,
            0xB15 => MHpmCounter21,
            0xB16 => MHpmCounter22,
            0xB17 => MHpmCounter23,
            0xB18 => MHpmCounter24,
            0xB19 => MHpmCounter25,
            0xB1A => MHpmCounter26,
            0xB1B => MHpmCounter27,
            0xB1C => MHpmCounter28,
            0xB1D => MHpmCounter29,
            0xB1E => MHpmCounter30,
            0xB1F => MHpmCounter31,

            0xB80 => MCycleh,
            0xB82 => MInstReth,
            0xB83 => MHpmCounter3h,
            0xB84 => MHpmCounter4h,
            0xB85 => MHpmCounter5h,
            0xB86 => MHpmCounter6h,
            0xB87 => MHpmCounter7h,
            0xB88 => MHpmCounter8h,
            0xB89 => MHpmCounter9h,
            0xB8A => MHpmCounter10h,
            0xB8B => MHpmCounter11h,
            0xB8C => MHpmCounter12h,
            0xB8D => MHpmCounter13h,
            0xB8E => MHpmCounter14h,
            0xB8F => MHpmCounter15h,
            0xB90 => MHpmCounter16h,
            0xB91 => MHpmCounter17h,
            0xB92 => MHpmCounter18h,
            0xB93 => MHpmCounter19h,
            0xB94 => MHpmCounter20h,
            0xB95 => MHpmCounter21h,
            0xB96 => MHpmCounter22h,
            0xB97 => MHpmCounter23h,
            0xB98 => MHpmCounter24h,
            0xB99 => MHpmCounter25h,
            0xB9A => MHpmCounter26h,
            0xB9B => MHpmCounter27h,
            0xB9C => MHpmCounter28h,
            0xB9D => MHpmCounter29h,
            0xB9E => MHpmCounter30h,
            0xB9F => MHpmCounter31h,

            0x320 => MCountInhibit,
            0x323 => MHpmEvent3,
            0x324 => MHpmEvent4,
            0x325 => MHpmEvent5,
            0x326 => MHpmEvent6,
            0x327 => MHpmEvent7,
            0x328 => MHpmEvent8,
            0x329 => MHpmEvent9,
            0x32A => MHpmEvent10,
            0x32B => MHpmEvent11,
            0x32C => MHpmEvent12,
            0x32D => MHpmEvent13,
            0x32E => MHpmEvent14,
            0x32F => MHpmEvent15,
            0x330 => MHpmEvent16,
            0x331 => MHpmEvent17,
            0x332 => MHpmEvent18,
            0x333 => MHpmEvent19,
            0x334 => MHpmEvent20,
            0x335 => MHpmEvent21,
            0x336 => MHpmEvent22,
            0x337 => MHpmEvent23,
            0x338 => MHpmEvent24,
            0x339 => MHpmEvent25,
            0x33A => MHpmEvent26,
            0x33B => MHpmEvent27,
            0x33C => MHpmEvent28,
            0x33D => MHpmEvent29,
            0x33E => MHpmEvent30,
            0x33F => MHpmEvent31,
            _ => Invalid,
        }
    }
}

pub struct CsrFile {
    reg: [u32; CSR_SIZE],
}

#[allow(unused)]
impl CsrFile {
    pub fn new() -> Self {
        Self { reg: [0; CSR_SIZE] }
    }
}

// MXL(2) WARL=0(4) Extensions(26)
pub struct MIsa(u32);
// Bank(25) Offset(7)
pub struct MVendorId(u32);
// SD(1) WPRI(8) TSR(1) TW(1) MXR(1) SUM(1) MPRV(1) XS(2) FS(2) MPP(2) VS(2)
// SPP(1) MPIE(1) UBE(1) SPIE(1) WPRI(1) MIE(1) WPRI(1) SIE(1) WPRI(1)
pub struct MStatus(u32);
// WPRI(26) MBE(1) SBE(1) WPRI(4)
pub struct MStatush(u32);

impl std::ops::Index<Csr> for CsrFile {
    type Output = u32;

    fn index(&self, index: Csr) -> &Self::Output {
        unsafe { self.reg.get_unchecked(index as usize) }
    }
}

impl std::ops::IndexMut<Csr> for CsrFile {
    fn index_mut(&mut self, index: Csr) -> &mut Self::Output {
        unsafe { self.reg.get_unchecked_mut(index as usize) }
    }
}
